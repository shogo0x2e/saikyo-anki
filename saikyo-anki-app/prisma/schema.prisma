datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Highlight {
  id                String      @id @default(uuid())
  userId            String
  wordId            String
  lastHighlightedAt DateTime    @default(now())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user              User        @relation(fields: [userId], references: [id])
  word              Word        @relation(fields: [wordId], references: [id])
  searchLogs        SearchLog[]

  @@unique([userId, wordId])
}

model SearchLog {
  id          String    @id @default(uuid())
  highlightId String
  url         String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  highlight   Highlight @relation(fields: [highlightId], references: [id])
}

model Word {
  id            String      @id @default(uuid())
  content       String      @unique
  aiExplanation String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  highlights    Highlight[]
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Highlight Highlight[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
